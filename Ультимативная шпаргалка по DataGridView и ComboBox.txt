–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –≤–æ—Ç —á—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–æ–∏—Ç –≤–∫–ª—é—á–∏—Ç—å –≤ —à–ø–æ—Ä—É –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ —Ç–µ–º–µ:

### üîπ –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ **ComboBox**

```csharp
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ ComboBox
string connStr = "—Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è";
string sql = "SELECT id, name FROM TableName";

using(SqlConnection conn = new SqlConnection(connStr))
{
    SqlDataAdapter adapter = new SqlDataAdapter(sql, conn);
    DataTable dt = new DataTable();
    adapter.Fill(dt);

    comboBox1.DataSource = dt;
    comboBox1.DisplayMember = "name";   // –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    comboBox1.ValueMember = "id";       // –ü–æ–ª–µ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
}
```

### üîπ –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ **DataGridView**

```csharp
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ DataGridView
string connStr = "—Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è";
string sql = "SELECT * FROM TableName";

using(SqlConnection conn = new SqlConnection(connStr))
{
    SqlDataAdapter adapter = new SqlDataAdapter(sql, conn);
    DataTable dt = new DataTable();
    adapter.Fill(dt);

    dataGridView1.DataSource = dt;
}
```

### üîπ –ü—Ä–æ—Å—Ç–∞—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è SELECT-–∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ–ª–µ–∑–Ω—ã–π —à–∞–±–ª–æ–Ω)

```csharp
private DataTable ExecuteQuery(string sql, Action<SqlParameterCollection> addParams = null)
{
    DataTable dt = new DataTable();
    try
    {
        using(SqlConnection conn = new SqlConnection("—Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"))
        using(SqlCommand cmd = new SqlCommand(sql, conn))
        {
            addParams?.Invoke(cmd.Parameters);
            new SqlDataAdapter(cmd).Fill(dt);
        }
    }
    catch(Exception ex)
    {
        MessageBox.Show(ex.Message, "–û—à–∏–±–∫–∞ SQL");
    }
    return dt;
}
```

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:

```csharp
var data = ExecuteQuery("SELECT * FROM Table");
dataGridView1.DataSource = data;
```

### üîπ –ö–∞–∫ –≤—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ (INSERT)

```csharp
string sql = "INSERT INTO TableName (col1, col2) VALUES (@val1, @val2)";
using(SqlConnection conn = new SqlConnection(connStr))
using(SqlCommand cmd = new SqlCommand(sql, conn))
{
    cmd.Parameters.AddWithValue("@val1", value1);
    cmd.Parameters.AddWithValue("@val2", value2);
    conn.Open();
    cmd.ExecuteNonQuery();
}
```

### üîπ –ö–∞–∫ –æ–±–Ω–æ–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ (UPDATE)

```csharp
string sql = "UPDATE TableName SET col1 = @val WHERE id = @id";
using(SqlConnection conn = new SqlConnection(connStr))
using(SqlCommand cmd = new SqlCommand(sql, conn))
{
    cmd.Parameters.AddWithValue("@val", newValue);
    cmd.Parameters.AddWithValue("@id", recordId);
    conn.Open();
    cmd.ExecuteNonQuery();
}
```

### üîπ –ö–∞–∫ —É–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ (DELETE)

```csharp
string sql = "DELETE FROM TableName WHERE id = @id";
using(SqlConnection conn = new SqlConnection(connStr))
using(SqlCommand cmd = new SqlCommand(sql, conn))
{
    cmd.Parameters.AddWithValue("@id", recordId);
    conn.Open();
    cmd.ExecuteNonQuery();
}
```

–£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ **DataGridView** –∏ **ComboBox** —Å –ø—Ä–æ—Å—Ç—ã–º –≤—ã–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –Ω–∞ **C# WinForms**.

---

## üü¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞

–î–æ–±–∞–≤—å –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞:

```csharp
using System.Data;
using System.Data.SqlClient;
```

–°–æ–∑–¥–∞–π —É–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥:

```csharp
private DataTable GetDataTable(string query, params SqlParameter[] parameters)
{	
    DataTable dt = new DataTable();
    using (SqlConnection conn = new SqlConnection("–¢–í–û–Ø –°–¢–†–û–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø"))
    using (SqlCommand cmd = new SqlCommand(query, conn))
    {
        if (parameters != null)
            cmd.Parameters.AddRange(parameters);
        using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
            adapter.Fill(dt);
    }
    return dt;
}
```

---

## üü° –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ ComboBox –∏–∑ –ë–î

–°–∞–º—ã–π —É–¥–æ–±–Ω—ã–π –∏ —á–∏—Å—Ç—ã–π —Å–ø–æ—Å–æ–±:

```csharp
private void FillComboBox(ComboBox combo, string query, string displayMember, string valueMember)
{
    DataTable dt = GetDataTable(query);
    combo.DataSource = dt;
    combo.DisplayMember = displayMember;
    combo.ValueMember = valueMember;
    combo.SelectedIndex = -1; // —á—Ç–æ–±—ã –±—ã–ª –ø—É—Å—Ç–æ–π –∫–æ–º–±–æ–±–æ–∫—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}
```

**–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:**

```csharp
FillComboBox(comboBoxDisciplines, "SELECT discipline_id, name FROM Discipline", "name", "discipline_id");
```

–¢–µ–ø–µ—Ä—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ–º —Ç–∞–∫:

```csharp
int selectedDisciplineId = (int)(comboBoxDisciplines.SelectedValue ?? 0);
```

---

## üîµ –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ DataGridView

**–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π –º–µ—Ç–æ–¥:**

```csharp
private void LoadGrid(DataGridView grid, string query, params SqlParameter[] parameters)
{
    DataTable dt = GetDataTable(query, parameters);
    grid.DataSource = dt;
    grid.ReadOnly = true;
    grid.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
    grid.AllowUserToAddRows = false;
    grid.AllowUserToDeleteRows = false;
    grid.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
}
```

**–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:**

```csharp
string sql = @"
    SELECT s.student_id, s.lastname + ' ' + s.firstname AS –§–ò–û, g.GradeValue AS –û—Ü–µ–Ω–∫–∞
    FROM Students s
    LEFT JOIN Grade g ON s.student_id = g.student_id AND g.discipline_id = @disciplineId
    WHERE s.group_id = @groupId";

LoadGrid(dataGridViewStudents, sql,
    new SqlParameter("@disciplineId", selectedDisciplineId),
    new SqlParameter("@groupId", selectedGroupId));
```

---

## üü£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–≤–∞–∂–Ω–æ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ):

* –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π `SelectedValue` –Ω–∞ null –ø–µ—Ä–µ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º.

```csharp
if (comboBoxDisciplines.SelectedValue != null)
{
    int id = (int)comboBoxDisciplines.SelectedValue;
}
```

* –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –≤ `DataGridView`:

```csharp
if (dataGridViewStudents.CurrentRow != null)
{
    int studentId = (int)dataGridViewStudents.CurrentRow.Cells["student_id"].Value;
}
```

* –ü—Ä–æ–≤–µ—Ä—è–π —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –∏ –ø—Ä–∏–≤–æ–¥–∏ –∏—Ö –∫ –Ω—É–∂–Ω—ã–º –≤ –∫–æ–¥–µ —è–≤–Ω–æ:

```csharp
Convert.ToInt32(row["column_name"]);
Convert.ToString(row["column_name"]);
```

---

